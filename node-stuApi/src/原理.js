/**
 *  事件循环   http://nodejs.cn/learn/the-nodejs-event-loop
    调用堆栈是一个 LIFO 队列（后进先出）。 事件循环不断地检查调用堆栈，以查看是否需要运行任何函数。
    当执行时，它会将找到的所有函数调用添加到调用堆栈中，并按顺序执行每个函数。
    如果有代码执行,就会有函数调用,就会有调用堆栈

    请求处理完成,定时器到期,回调函数就会被放到 消息队列中等待执行

    每当事件循环进行一次完整的行程时，我们都将其称为一个滴答。
    当将一个函数传给 process.nextTick() 时，则指示引擎在当前操作结束（在下一个事件循环滴答开始之前）时调用此函数：
    process.nextTick(() => {
    //做些事情
    })

    回调函数
    一种非常常见的策略是使用 Node.js 所采用的方式：任何回调函数中的第一个参数为错误对象（即错误优先的回调）。
    如果没有错误，则该对象为 null。 如果有错误，则它会包含对该错误的描述以及其他信息。

    nodejs事件触发器:  events 模块  具体上，此模块提供了 EventEmitter 类，用于处理事件。

    Stream
    在一个应用程序中，流是一组有序的、有起点和终点的字节数据的传输手段。
    Buffer
    用于创建一个专门存放二进制数据的缓存区

 */