第一步：  记住使用redux 后的组件更新状态流程图
自己写的组件App里面 触发点击事件  需要更改state
this.props.store.dispatch(action对象)
this.props.store.dispatch({type:'increment',data:number})
this.props.store.dispatch(actions.increment(number))    //可以自己写一个actions.js文件 里面封装好需要的函数 返回一个action对象   import * as actions from './actions' 

为什么props里面有store  因为我们在使用App组件的时候传入了store={store}
store 怎么产生的？   可以写在一个stores.js里面  import { createStore } from 'redux'  const store = createStore(counter)    这里就涉及到了reducers

reducers里面存放的是函数   
参数（state【=0初始化使用】，action对象 ）对state进行处理更新  并返回return state + action.data * 1
想要在state变化后更新页面  需要将渲染页面的函数作为
store.subscribe()的回调函数

react-redux 的诞生  是降低App。jsx里面的耦合性  index.js的书写方式和以前一样
安装好   区分UI组件和容器组件
使用<Provider>标签包裹  这样就可以自己监听变化并更新页面
ReactDOM.render(
    <Provider store={store}>
        <App></App>
    </Provider>
    , document.getElementById('root')
)
还有一点是App.js里面使用this.props.store.XXXX特别耦合 繁琐
我们使用connect函数包装App组件 当然为了便于识别  将App改名为具体的功能名counter
export default connect （
    state=>({count:state}  )        //把state值赋给count属性   就是给包装后的组件传入一个数据
    {increment:increment}       //第一个是属性increment（可以是一个函数吧就是为了在组件里面直接使用this.props.increment调用）  第二个是actions里面暴漏出来的函数
）（Counter）

